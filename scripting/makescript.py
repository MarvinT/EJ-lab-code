# make sh file for copying and analyzing data
import os
import stat
import re

filename = "scripts.sh"

transfer_set = 3

if transfer_set == 1:
	templates = '11, 20'
	movie_specs = ['RGB-8-8-0.48-22222', 'RGB-8-8-0.48-33333']
	mapped = '12-19'
	date = "2007-03-27-1"
elif transfer_set == 2:
	templates = '0, 1, 12, 13'
	movie_specs = ["RGB-10-8-0.48-11111", "RGB-10-8-0.48-11111", "RGB-10-8-0.48-11111", "RGB-10-8-0.48-22222"]
	mapped = '2-11, 14'
	date = "2007-08-24-4"
elif transfer_set == 3:
	templates = '2, 14'
	movie_specs = ["RGB-10-8-0.48-11111", "RGB-10-8-0.48-11111"]
	mapped = '3-13'
	date = '2008-04-08-0'
	
remote_dir = "/rush/snlearchive/data/" + date + "/data%03d/*.bin"
local_data_dir = "/Data/" + date + "/data%03d"
movie_dir = "/snle/acquisition/movie-xml/%s.xml"

def mkdir(path):
	if not os.path.isdir(path):
		f.write("mkdir %s\n" % path)

def is_empty_folder(path):
	return not os.path.isdir(path) or len(os.listdir(path)) == 0

def rsync(data_num):
	f.write("rsync -a -E -progress " + remote_dir % (data_num,) + " " + local_data_dir % (data_num,) +"\n")
	f.write("echo 'data set %d synced'\n\n" % data_num)
	
class interpret_range:
	def __init__(self, str_range):
		str_range = ''.join(str_range.split())
		self.lst_range = str_range.split(',')
		self.tstart = None
		self.tend = None
	def __iter__(self):
		return self
	def next(self):
		if self.tstart is None and self.tend is None:
			if not self.lst_range :
				raise StopIteration
			else:
				value = self.lst_range.pop(0)
				match = re.match('[0-9]+\-[0-9]+',value)
				if match:
					start_str, end_str = value.split('-')
					self.tstart = int(start_str)
					self.tend = int(end_str)
					assert self.tstart < self.tend
				else:
					return int(value)
		value = self.tstart
		if value >= self.tend:
			self.tstart = None
			self.tend = None
		else:
			self.tstart += 1
		return value

def mapped_template(mapped_num, templates):
	val = -1
	for template in interpret_range(templates):
		if template < mapped_num and template > val:
			val = template
	return val
	
for template in interpret_range(templates):
	for map_num in interpret_range(mapped):
		assert template != map_num, 'templates overlap mapped datasets'

f = open(filename, 'w')

f.write('#!/bin/bash\n')
f.write('# this file was automatically generated by scriptmake.py\n\n\n')

mkdir("/Data/%s" % date)

for idx, template_num in enumerate(interpret_range(templates)):
	nwpca_dir = local_data_dir % (template_num,) +"-nwpca"
	movie_spec = movie_dir % (movie_specs[idx])
	mkdir(nwpca_dir)
	if is_empty_folder(nwpca_dir):
		rsync(template_num)
		f.write("vision-auto-sta-64 " + local_data_dir % (template_num,) + " " + nwpca_dir + " " + movie_spec + " true true\n")
		f.write("echo 'template %d analyzed'\n\n" % (template_num,))

for i in interpret_range(mapped):
	template_num = mapped_template(i, templates)
	mapped_path = local_data_dir % (i,) + "-from-data%03d-nwpca" % (template_num,)
	mkdir(mapped_path)
	if is_empty_folder(mapped_path):
		if not os.path.isdir(local_data_dir % (i,)):
			f.write("mkdir " + local_data_dir % (i,) + "\n")
		rsync(i)
		f.write("map-auto " + local_data_dir % (i,) + " " + local_data_dir % (template_num,) + "-nwpca " + mapped_path + " ei\n")
		f.write("echo 'data set %d mapped'\n\n" % (i,))
	
f.close()
st = os.stat(filename)
os.chmod(filename, st.st_mode | stat.S_IEXEC)